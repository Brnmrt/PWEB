@page "/encomenda/edit"
@attribute [Authorize(Roles = "Administrador,Funcionario")]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using GestaoLoja.Entities
@inject IDbContextFactory<GestaoLoja.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Editar</PageTitle>

<h1>Editar este registo</h1>

<h2>Encomenda</h2>
<hr />
@if (Encomenda is null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Encomenda" OnValidSubmit="UpdateEncomenda" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Encomenda.Id" value="@Encomenda.Id" />
                
                <div class="mb-3">
                    <label for="userid" class="form-label">UserId:</label>
                    <InputText id="userid" @bind-Value="Encomenda.UserId" class="form-control" readonly/>
                    <ValidationMessage For="() => Encomenda.UserId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="produtoid" class="form-label">ProdutoId:</label>
                    <InputNumber id="produtoid" @bind-Value="Encomenda.ProdutoId" class="form-control" />
                    <ValidationMessage For="() => Encomenda.ProdutoId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="quantidade" class="form-label">Quantidade:</label>
                    <InputNumber id="quantidade" @bind-Value="Encomenda.Quantidade" class="form-control" />
                    <ValidationMessage For="() => Encomenda.Quantidade" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="estado" class="form-label">Estado:</label>
                    @if (Encomenda.Estado == "Pendente")
                    {
                        <InputSelect id="estado" @bind-Value="Encomenda.Estado" class="form-control">
                            @foreach(var opcao in opcoes)
                            {
                                <option value="@opcao">@opcao</option>
                            })
                        </InputSelect>
                    }
                    else
                    {
                        <InputText id="estado" @bind-Value="Encomenda.Estado" class="form-control" readonly />
                    }
                    <ValidationMessage For="() => Encomenda.Estado" class="text-danger" />
                </div>
                
                
                <button type="submit" class="btn btn-primary"><img title="Gravar" src="/img/saveicon.png" style="height:30px" /></button>
                <a href="/encomenda" type="button" class="btn btn-outline-secondary"><img title="Recuar" src="/img/backicon.png" style="height:30px" /></a>
            </EditForm>
        </div>
    </div>
}


@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Encomenda? Encomenda { get; set; }
    private DateTime originalData { get; set; }

    private List<String> opcoes;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Encomenda ??= await context.Encomendas.FirstOrDefaultAsync(m => m.Id == Id);

        if (Encomenda is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        opcoes = new List<string> { "Rejeitada"};

        if(Encomenda.Paga)
            {
            opcoes.Add("Aceite");
        }

        originalData = Encomenda.DataCriacao;
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateEncomenda()
    {
        using var context = DbFactory.CreateDbContext();
        
        Encomenda.DataCriacao = originalData;
        Produto produto = context.Produtos.FirstOrDefault(p => p.Id == Encomenda.ProdutoId);
        Encomenda.Preco = produto.Preco * Encomenda.Quantidade;
        context.Attach(Encomenda!).State = EntityState.Modified;
        

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!EncomendaExists(Encomenda!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/encomenda");
    }

    

    private bool EncomendaExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Encomendas.Any(e => e.Id == id);
    }
}
